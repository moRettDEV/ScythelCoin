<!--index.ejs-->
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Управление тратами</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
<div class="container mt-3">
    <!-- Хедер с навигацией -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Траты</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" id="add-expense-link">Добавить трату</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="view-expenses-link">Список трат</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Основной контент -->
    <div id="content">
        <!-- Добавление траты -->
        <div id="add-expense-page">
            <h1>Добавить новую трату</h1>
            <form id="expense-form">
                <div class="mb-3">
                    <label for="name" class="form-label">Название траты:</label>
                    <input type="text" id="name" name="name" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="amount" class="form-label">Сумма:</label>
                    <input type="text" id="amount" name="amount" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание:</label>
                    <input type="text" id="description" name="description" class="form-control">
                </div>
                <div class="mb-3">
                    <label for="categories" class="form-label">Категории:</label>
                    <select id="categories" name="categories[]" class="form-select" multiple required>
                        <!-- Категории будут загружены через JS -->
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Добавить</button>
            </form>
            <!--Добавление категории-->
            <div class="mb-3">
                <label for="new-category" class="form-label">Новая категория:</label>
                <input type="text" id="new-category" name="new-category" class="form-control">
            </div>
            <button type="button" id="add-category-btn" class="btn btn-secondary">Добавить категорию</button>
        </div>


        <!-- Просмотр трат -->
        <div id="view-expenses-page" class="d-none">
            <h1>Список всех трат</h1>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>#</th>
                    <th>Название</th>
                    <th>Сумма</th>
                    <th>Описание</th>
                    <th>Категории</th>
                    <th>Действия</th>
                </tr>
                </thead>
                <tbody id="expenses-list">
                <!-- Траты будут загружены через JS -->
                </tbody>
            </table>

            <!-- Сумма по категориям -->
            <h2>Расходы по категориям</h2>
            <ul id="category-summary">
                <!-- Сумма по категориям будет здесь -->
            </ul>
        </div>
    </div>
</div>

<script>
    // Навигация между страницами
    const addExpensePage = document.getElementById('add-expense-page');
    const viewExpensesPage = document.getElementById('view-expenses-page');

    document.getElementById('add-expense-link').addEventListener('click', function () {
        addExpensePage.classList.remove('d-none');
        viewExpensesPage.classList.add('d-none');
    });

    document.getElementById('view-expenses-link').addEventListener('click', function () {
        addExpensePage.classList.add('d-none');
        viewExpensesPage.classList.remove('d-none');
        loadExpenses(); // Загрузить список трат
    });

    // Загрузка категорий
    function loadCategories() {
        fetch('/api/categories')
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById('categories');
                select.innerHTML = '';  // Очищаем текущий список категорий
                data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Ошибка загрузки категорий:', error);
                alert('Ошибка загрузки категорий');
            });
    }

    // Обработчик для добавления новой категории
    document.getElementById('add-category-btn').addEventListener('click', function () {
        const newCategory = document.getElementById('new-category').value;

        if (!newCategory) {
            alert('Введите название категории');
            return;
        }

        fetch('/api/categories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newCategory })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Категория добавлена!');
                    loadCategories();  // Перезагрузить список категорий
                    document.getElementById('new-category').value = '';  // Очистить поле ввода
                } else {
                    alert('Ошибка при добавлении категории');
                }
            })
            .catch(error => {
                console.error('Ошибка при добавлении категории:', error);
                alert('Ошибка при добавлении категории');
            });
    });

    // Загрузка категорий при загрузке страницы
    document.addEventListener('DOMContentLoaded', function () {
        loadCategories();
    });


    // Загрузка категорий в форму добавления траты
    fetch('/api/categories')
        .then(response => response.json())
        .then(data => {
            const select = document.getElementById('categories');
            select.innerHTML = '';
            data.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                select.appendChild(option);
            });
        })
        .catch(error => console.error('Ошибка загрузки категорий:', error));

    // Обработчик формы для добавления траты
    document.getElementById('expense-form').addEventListener('submit', function (e) {
        e.preventDefault();
        const name = document.getElementById('name').value;
        const amount = document.getElementById('amount').value;
        const description = document.getElementById('description').value;
        const categories = Array.from(document.getElementById('categories').selectedOptions).map(option => option.value);

        fetch('/api/expenses', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, amount, description, categories })
        })
            .then(response => response.json())
            .then(data => alert(data.message || 'Трата добавлена!'))
            .catch(error => console.error('Ошибка при добавлении траты:', error));
    });

    // Загрузка списка трат и подсчет расходов по категориям
    function loadExpenses() {
        fetch('/api/expenses')
            .then(response => response.json())
            .then(data => {
                const expensesList = document.getElementById('expenses-list');
                const categorySummary = document.getElementById('category-summary');
                expensesList.innerHTML = '';
                categorySummary.innerHTML = ''; // Очистка списка категорий

                // Объект для хранения суммы по категориям
                const categorySums = {};

                data.forEach((expense, index) => {
                    const row = document.createElement('tr');
                    const categoriesList = expense.categories.map(category =>
                        `<span class="badge bg-primary me-1">${category.name}</span>`
                    ).join('');

                    // Кнопка для удаления траты
                    const deleteButton = `<button class="btn btn-danger btn-sm" onclick="deleteExpense(${expense.id})">Удалить</button>`;

                    row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${expense.name}</td>
                    <td>${expense.amount}</td>
                    <td>${expense.description || '—'}</td>
                    <td>${categoriesList}</td>
                    <td>${deleteButton}</td>
                `;
                    expensesList.appendChild(row);

                    // Подсчет суммы по категориям
                    expense.categories.forEach(category => {
                        if (categorySums[category.name]) {
                            categorySums[category.name] += parseFloat(expense.amount);
                        } else {
                            categorySums[category.name] = parseFloat(expense.amount);
                        }
                    });
                });

                // Вывод суммы по категориям
                for (const [categoryName, totalSpent] of Object.entries(categorySums)) {
                    const listItem = document.createElement('li');
                    listItem.textContent = `${categoryName} - ${totalSpent.toLocaleString()}₽`;
                    categorySummary.appendChild(listItem);
                }
            })
            .catch(error => console.error('Ошибка загрузки трат:', error));
    }

    // Функция для удаления траты
    function deleteExpense(expenseId) {
        if (confirm('Вы уверены, что хотите удалить эту трату?')) {
            fetch(`/api/expenses/${expenseId}`, {
                method: 'DELETE',
            })
                .then(response => response.json())  // Преобразуем ответ в JSON
                .then(data => {
                    if (data.success) {  // Проверяем success
                        alert('Трата удалена');
                        loadExpenses();  // Перезагружаем список трат
                    } else {
                        alert('Ошибка при удалении траты');
                    }
                })
                .catch(error => {
                    console.error('Ошибка при удалении:', error); // Логируем ошибку
                    alert('Ошибка при удалении траты');
                });
        }
    }
</script>
</body>
</html>
